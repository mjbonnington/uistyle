#!/usr/bin/python

# style_test.py
#
# Mike Bonnington <mjbonnington@gmail.com>
# (c) 2018-2021
#
# Template for Qt GUI application written in Python
# Uses Qt.py for compatibility with all Python bindings.
#
# Directions for use:
# 
# Create your UI in Qt Designer and save as (e.g) 'style.ui'
# No need to compile your UI with pyside-uic as we load the .ui file directly.
# 
# Save your resources file as (e.g.) 'style.qrc'
# Compile resources to with command: 'pyside-rcc style.qrc -o style_rc.py'
# For compatibility with PySide2, replace 'from [PySide/PyQt] import QtCore'
# with 'from Qt import QtCore'
# 
# Run with command: 'python ./style_test.py'

import os
import sys

from Qt import QtCompat, QtCore, QtGui, QtWidgets
import ui_template as UI

# Import custom modules
import imagebutton

# import ui_chrome_rc  # Import resource file as generated by pyside-rcc
# import rsc_rc  # Import resource file as generated by pyside-rcc - LEGACY


# ----------------------------------------------------------------------------
# Configuration
# ----------------------------------------------------------------------------

VERSION = os.getenv('REZ_IC_UI_VERSION', "0.0.0")

cfg = {
	'window_object': "styleTestUI", 
	'window_title': "Style Test", 

	'ui_file': os.path.join(os.path.dirname(__file__), 'forms', 'style_test.ui'), 
	'stylesheet': 'style.qss', 
	'icon': 'view-preview.svg', 

	# 'prefs_file': os.path.join(prefs_location, 'manager_prefs.json'), 
	# 'store_window_geometry': True, 
}

# ----------------------------------------------------------------------------
# Begin main application class
# ----------------------------------------------------------------------------

class StyleTestApp(QtWidgets.QMainWindow, UI.TemplateUI):
	"""Main application class."""

	def __init__(self, parent=None):
		super(StyleTestApp, self).__init__(parent)
		self.parent = parent

		self.setupUI(**cfg)

		# Set window flags and other Qt attributes
		self.setWindowFlags(QtCore.Qt.Window)

		# # Restore widget state
		# try:
		# 	self.ui.splitter.restoreState(self.settings.value("splitterSizes")) #.toByteArray())
		# 	#self.ui.renderQueue_treeWidget.header().restoreState(self.settings.value("renderQueueView")) #.toByteArray())
		# except:
		# 	pass

		# Set up about dialog
		about = lambda: self.about(
			app_name=cfg['window_title'], 
			app_version="v" + VERSION, 
			description="Template for Qt GUI application written in Python.\nUses Qt.py for compatibility with all Python bindings.\n", 
			credits="Principal developer: Mike Bonnington")

		self.show()

		# Load and set stylesheet - workaround for bug in Qt 4.8 where some
		# styles not being applied (including QHeaderView / QTableView) if
		# stylesheet is loaded before ui is displayed.
		# self.stylesheet = cfg['stylesheet']
		# self.loadStyleSheet()

		self.info()

		# Set icons
		self.ui.toolButton_10.setIcon(self.iconSet('folder.svg'))
		self.ui.toolButton_11.setIcon(self.iconSet('computer-symbolic.svg'))
		self.ui.toolButton_12.setIcon(self.iconSet('utilities-terminal-symbolic.svg'))
		self.ui.toolButton_13.setIcon(self.iconSet('refresh.svg'))
		self.ui.toolButton_14.setIcon(self.iconSet('add.svg'))
		self.ui.toolButton_15.setIcon(self.iconSet('edit.svg'))
		self.ui.toolButton_16.setIcon(self.iconSet('merge.svg'))
		self.ui.toolButton_17.setIcon(self.iconSet('clear.svg'))

		# Connect signals & slots
		self.ui.actionOpen_UI.triggered.connect(self.openUI)
		self.ui.actionOpen_Stylesheet.triggered.connect(self.openQSS)
		self.ui.actionSave_Stylesheet.triggered.connect(self.saveQSS)
		self.ui.actionAbout.triggered.connect(about)

		self.ui.actionQuit.triggered.connect(self.exit)
		self.ui.buttonBox.button(QtWidgets.QDialogButtonBox.Cancel).clicked.connect(self.exit)
		#self.ui.buttonBox.button(QtWidgets.QDialogButtonBox.Ok).clicked.connect(self.loadStyleSheet)

		self.ui.colorChooser_button.setStyleSheet("QWidget { background-color: %s }" %self.col['highlight'].name())
		self.ui.colorChooser_button.clicked.connect(self.setAccentColor)
		self.ui.uiBrightness_slider.setValue(self.col['window'].lightness())
		self.ui.uiBrightness_slider.valueChanged.connect(lambda value: self.setUIBrightness(value))
		#self.ui.reloadUI_pushButton.clicked.connect(self.loadUIFile)
		self.ui.reloadStylesheet_pushButton.clicked.connect(self.loadStyleSheet)
		self.ui.unloadStylesheet_pushButton.clicked.connect(self.unloadStyleSheet)
		self.ui.saveStylesheet_pushButton.clicked.connect(self.saveStyleSheet)

		self.ui.loadedUIs_tabWidget.tabCloseRequested.connect(lambda index: self.ui.loadedUIs_tabWidget.removeTab(index))  # Allow tabs to be closed

		# Set up image thumbnail browser button
		self.ui.thumbnail_imageButton = imagebutton.ImageButton(max_size=[512, 288])
		# self.ui.thumbnail_verticalLayout.insertWidget(0, self.ui.thumbnail_imageButton)
		self.ui.thumbnail_verticalLayout.addWidget(self.ui.thumbnail_imageButton)
		self.ui.thumbnail_lineEdit.hide()

		# self.ui.thumbnail_imageButton.clicked.connect(lambda: self.browse_file(self.ui.thumbnail_lineEdit, 'Image files (*.jpg *.png *.gif)'))
		self.ui.thumbnail_imageButton.imageChanged.connect(lambda imgpath: self.ui.thumbnail_lineEdit.setText(imgpath))
		self.ui.thumbnail_lineEdit.textChanged.connect(lambda text: self.ui.thumbnail_imageButton.updateThumbnail(text))

		# Add 'Sort by' separator label
		label = QtWidgets.QLabel("Sort by:")
		sortBy_separator = QtWidgets.QWidgetAction(self)
		sortBy_separator.setDefaultWidget(label)
		self.ui.menuEdit.insertAction(self.ui.actionName, sortBy_separator)

		# Make 'Sort by' actions mutually exclusive
		alignmentGroup = QtWidgets.QActionGroup(self)
		alignmentGroup.addAction(self.ui.actionName)
		alignmentGroup.addAction(self.ui.actionSize)
		alignmentGroup.addAction(self.ui.actionType)
		alignmentGroup.addAction(self.ui.actionDate)

		# Add 'Other' separator label
		label = QtWidgets.QLabel("Other:")
		other_separator = QtWidgets.QWidgetAction(self)
		other_separator.setDefaultWidget(label)
		other_separator.setEnabled(False)
		self.ui.menuEdit.insertAction(self.ui.actionAttribute, other_separator)

		# Make 'Other' actions mutually exclusive
		otherGroup = QtWidgets.QActionGroup(self)
		otherGroup.addAction(self.ui.actionAttribute)
		otherGroup.addAction(self.ui.actionObject)


	# [Application code goes here]


	def info(self):
		""" Return some version info about Python, Qt, binding, etc.
		"""
		from Qt import __binding__, __binding_version__

		print("Python %d.%d.%d" %(sys.version_info[0], sys.version_info[1], sys.version_info[2]))
		print("%s %s" %(__binding__, __binding_version__))
		print("Qt %s" %QtCore.qVersion())


	def openUI(self):
		"""Load UI into its own tab."""

		ui_file = self.fileDialog('.', fileFilter='UI files (*.ui)')
		# Add and select new tab
		if ui_file:
			ui = QtCompat.loadUi(ui_file)
			tab_id = self.ui.loadedUIs_tabWidget.addTab(ui, os.path.basename(ui_file))
			self.ui.loadedUIs_tabWidget.setCurrentIndex(tab_id)
			self.setupWidgets(ui)
			self.conformFormLayoutLabels(ui)


	def openQSS(self):
		"""Load QSS stylesheet file and apply to UI."""

		qss_file = self.fileDialog('.', fileFilter='Qt Style Sheet files (*.qss)')
		# Load and set stylesheet
		if qss_file:
			self.stylesheet = qss_file
			self.loadStyleSheet()
			self.setWindowTitle(cfg['window_title'] + " - " + os.path.basename(self.stylesheet))


	def saveQSS(self):
		"""Save QSS stylesheet."""

		qss_file = self.fileDialog('.', fileFilter='Qt Style Sheet files (*.qss)')
		if qss_file:
			self.saveStyleSheet(output_name=qss_file)


	def exit(self):
		"""Exit the UI."""

		print("Exit the UI.")
		self.ui.hide()
		if __name__ == "__main__":
			sys.exit()


	def closeEvent(self, event):
		"""Event handler for when window is closed."""

		# Store window geometry and state of certain widgets
		self.storeWindow()
		self.settings.setValue("splitterSizes", self.ui.splitter.saveState())
		#self.settings.setValue("renderQueueView", self.ui.renderQueue_treeWidget.header().saveState())

		QtWidgets.QMainWindow.closeEvent(self, event)

# ----------------------------------------------------------------------------
# End main dialog class
# ============================================================================
# Run functions
# ----------------------------------------------------------------------------

def run(session):
	"""Run inside host app."""

	try:  # Show the UI
		session.styleTestUI.show()
	except AttributeError:  # Create the UI
		session.styleTestUI = StyleTestApp(parent=UI._main_window())
		session.styleTestUI.show()


if __name__ == "__main__":
	app = QtWidgets.QApplication(sys.argv)

	# Apply application style
	# styles = QtWidgets.QStyleFactory.keys()
	# if 'Fusion' in styles:  # Qt5
	# 	app.setStyle('Fusion')

	# Hack to fix 'etching' on disabled text
	pal = QtWidgets.QApplication.palette()
	#pal.setColor(QtGui.QPalette.Disabled, QtGui.QPalette.Text, QtGui.QColor(102, 102, 102))
	pal.setColor(QtGui.QPalette.Disabled, QtGui.QPalette.Light, QtGui.QColor(0, 0, 0, 0))
	pal.setColor(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, QtGui.QColor(0, 0, 0, 0))
	pal.setColor(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, QtGui.QColor(0, 0, 0, 0))
	pal.setColor(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, QtGui.QColor(0, 0, 0, 0))
	pal.setColor(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, QtGui.QColor(0, 0, 0, 0))
	app.setPalette(pal);

	myApp = StyleTestApp()
	sys.exit(app.exec_())

else:
	myApp = StyleTestApp()
