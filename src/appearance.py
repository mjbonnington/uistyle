import os
import math
import platform
# from pprint import pprint

from Qt import QtCore, QtGui, QtWidgets
import ui_chrome_rc  # Import resource file as generated by pyside-rcc

from vendor import darkdetect

from duperlogger import get_logger
logger = get_logger("uistyle", level=10)
# import logging
# logger = logging.getLogger("uistyle")


class Appearance(QtCore.QObject):
	"""Appearance class.

	Manage custom UI colour palette and stylesheet.
	"""

	col = {}
	stylesheet = ""
	font_size = 11
	color_changed = QtCore.Signal()

	def __init__(self, widget, qss=None, window_color=None, accent_color=None, font_size=11):
		"""Class constructor.

		Arguments:
			widget (QObject) - Apply styles to this widget/window.

		Keyword arguments:
			qss (str) - File path to QSS stylesheet file.
			window_color (QColor) - Color to use for window background.
			accent_color (QColor) - Color to use for accents and highlights.
			font-size (int) - Font size in pixels for standard UI.
		"""
		super(Appearance, self).__init__()
		self.widget = widget
		self.qss = qss
		self.theme = None
		self.font_size = font_size

		# Set up keyboard shortcuts ------------------------------------------
		self.shortcutClearQSS = QtWidgets.QShortcut(self.widget)
		self.shortcutClearQSS.setKey('Ctrl+Shift+R')
		self.shortcutClearQSS.activated.connect(self.clear_stylesheet)

		self.shortcutReloadQSS = QtWidgets.QShortcut(self.widget)
		self.shortcutReloadQSS.setKey('Ctrl+R')
		self.shortcutReloadQSS.activated.connect(self.read_stylesheet)

		self.shortcutCycleStyles = QtWidgets.QShortcut(self.widget)
		self.shortcutCycleStyles.setKey('Ctrl+Alt+R')
		self.shortcutCycleStyles.activated.connect(self.cycle_styles)

		# Store some system UI colours & generate colour palette -------------
		self.detect_system_theme()
		self.col['window'] = self.col['sys-window'] if window_color is None else window_color
		self.col['highlight'] = self.col['sys-highlight'] if accent_color is None else accent_color
		self.compute_ui_palette()

		# Load and set stylesheet --------------------------------------------
		if qss is not None:
			self.read_stylesheet()

		# End initialisation -------------------------------------------------


	def detect_system_theme(self):
		"""Detect the system theme (light/dark mode).

		Set the appropriate UI colours in the 'self.col' dictionary. It is
		then left to the program to then assign these colors to the current
		palette.
		"""
		logger.debug("Detecting system theme...")
		try:  # Detect dark theme
			self.theme = darkdetect.theme()
			if darkdetect.isDark():
				self.col['sys-window'] = QtGui.QColor('#33393b')
			else:
				self.col['sys-window'] = QtGui.QColor('#efefef')
		except:  # Fall back to auto-detecting window colour
			self.col['sys-window'] = QtWidgets.QWidget().palette().color(QtGui.QPalette.Window)
		self.col['sys-highlight'] = QtWidgets.QWidget().palette().color(QtGui.QPalette.Highlight)
		logger.info("Detected '{}' system theme.".format(self.theme))


	def compute_ui_palette(self):
		"""Compute complementary UI colours based on window colour."""

		logger.debug("Computing UI palette...")
		with open(os.path.join(os.path.dirname(__file__), 'compute_ui_palette.py'), 'r') as fh:
			code = fh.read()
			exec(code)

		# (Paste here the code from compute_ui_palette.py)


	def read_stylesheet(self):  #, input_qss):
		"""Read stylesheet.

		Arguments:
			input_qss (str) - Input path from which to read QSS file.
		"""
		logger.info("Read stylesheet: {}".format(self.qss))
		with open(self.qss, 'r') as fh:
			self.stylesheet_orig = fh.read()
			self.apply_stylesheet(self.stylesheet_orig)


	def apply_stylesheet(self, stylesheet):
		"""Process the dynamic stylesheet and apply to widget."""

		logger.debug("Processing dynamic stylesheet...")

		# Read predefined colour variables and apply them to the style
		for key, value in self.col.items():
			try:
				rgb = "%d, %d, %d" % (value.red(), value.green(), value.blue())
			except AttributeError:
				rgb = value
			stylesheet = stylesheet.replace(r"%{}%".format(key), rgb)

		# Replace font tokens
		font_str = ""
		# if HOST != 'houdini':
		if platform.system() == 'Windows':
			font_str = "'Segoe UI'"
		elif platform.system() == 'Linux':
			font_str = "'Cantarell', 'OpenSans', 'sans'"
		stylesheet = stylesheet.replace(r"%systemfont%", font_str)
		stylesheet = stylesheet.replace(r"%fontsize%", str(self.font_size))

		self.stylesheet = stylesheet
		self.widget.setStyleSheet(self.stylesheet)


	def write_stylesheet(self, output_qss):
		"""Write stylesheet and bake tokens for compatibility.

		Arguments:
			output_qss (str) - Output path to write QSS file.
		"""
		logger.info("Write stylesheet: {}".format(output_qss))
		with open(output_qss, 'w') as fh:
			fh.write("/* Generated by uistyle */\n")
			fh.write(self.stylesheet)


	def clear_stylesheet(self):
		"""Clear stylesheet."""

		self.stylesheet = ""
		self.widget.setStyleSheet(self.stylesheet)
		logger.info("Stylesheet cleared.")


	def cycle_styles(self):
		"""Cycle through preset Qt styles and apply application-wide."""

		try:
			style = next(self.styles)
		except (AttributeError, NameError, StopIteration):
			self.styles = iter(QtWidgets.QStyleFactory.keys())
			style = next(self.styles)

		self.set_qt_style(style)


	def set_qt_style(self, style):
		"""Apply preset Qt style."""

		self.clear_stylesheet()
		QtWidgets.QApplication.setStyle(style)
		msg = "Set style to '{}'".format(style)
		logger.info(msg)
		return msg


	def reset_(self):
		"""Reset the stylesheet."""

		logger.debug("Reset appearance...")
		self.compute_ui_palette()
		self.apply_stylesheet(self.stylesheet_orig)
		self.widget.set_icons()  #


	@QtCore.Slot(int)
	def set_ui_brightness(self, value):
		"""Set the UI style background shade.

		Arguments:
			value (int) : Luminance value between 0-255.
		"""
		h, s, l, a = self.col['window'].getHsl()
		self.col['window'].setHsl(h, s, value)
		self.reset_()


	@QtCore.Slot(str, QtGui.QColor)
	def set_ui_color(self, role, color=None):
		"""Set the UI style colour for the given role.

		Arguments:
			role (str) : The palette role to set. This is a key for the
				'self.col' dictionary.
			color (QColor) : Colour to use.
		"""
		self.col[role] = color
		self.reset_()


	@QtCore.Slot(int)
	def set_font_size(self, value):
		"""Set the size of the font used thoughout the UI.

		Arguments:
			value (int) : Font size in pixels.
		"""
		self.font_size = value
		self.reset_()


	def set_luminance(self, input_color, luminance):
		"""Set the luminance of a color to a given value.

		Arguments:
			input_color (QColor) : Input colour to adjust.
			luminance (int) : Luminance value between 0-255.
		"""
		h, s, l, a = input_color.getHsl()
		out_color = QtGui.QColor()
		out_color.setHsl(h, s, luminance)
		return out_color


	def color_offset(self, input_color, amount, clamp=None):
		"""Lighten or darken input_color by a given amount.

		Arguments:
			input_color (QColor) - Input colour to adjust.
			amount (int) - Value to offset +/- 255.
			clamp (int, optional) - Value between 0-255. The output lightness
				is not allowed to go past this min/max value.
		"""
		if amount == 0:  # Do nothing
			return input_color

		elif amount > 0:  # Lighten
			if clamp is None:
				min_clamp = 0
			else:
				min_clamp = clamp
			max_clamp = 255

		elif amount < 0:  # Darken
			min_clamp = 0
			if clamp is None:
				max_clamp = 255
			else:
				max_clamp = clamp

		lum = max(min_clamp, min(input_color.lightness() + amount, max_clamp))
		return self.set_luminance(input_color, lum)


	def nearest_color(self, input_color):
		"""Find the closest colour match in a limited palette.

		Arguments:
			input_color (QColor) : The colour to match.
		"""
		palette = ['000', '333', '666', '999', 'ccc', 'fff']

		r = input_color.red()
		g = input_color.green()
		b = input_color.blue()

		# Compare against palette and find closest match
		ranked_diffs = {}
		for entry in palette:
			if len(entry) == 3:
				triplet = "".join([x * 2 for x in entry])
			elif len(entry) == 6:
				triplet = entry
			try:
				p_r, p_g, p_b = bytes.fromhex(triplet)
			except AttributeError:
				p_r, p_g, p_b = tuple(int(triplet[i : i + 2], 16) for i in (0, 2, 4))
			delta_r = abs(r - p_r)
			delta_g = abs(g - p_g)
			delta_b = abs(b - p_b)
			ranked_diffs[entry] = math.sqrt(
				(delta_r * delta_r) + (delta_g * delta_g) + (delta_b * delta_b)
			)
		code = sorted(ranked_diffs, key=ranked_diffs.get)[0]

		return code
